version: '3'

x-proxy: &proxy
  - HTTP_PROXY=$HTTP_PROXY
  - http_proxy=$http_proxy
  - HTTPS_PROXY=$HTTPS_PROXY
  - https_proxy=$https_proxy
  - FTP_PROXY=$FTP_PROXY
  - ftp_proxy=$ftp_proxy
  - NO_PROXY=${NO_PROXY},plantuml-local-server
  - no_proxy=${no_proxy},plantuml-local-server
services:
  plantuml-server:
    build:
      context: ./plantuml
      # dockerfile: ./Dockerfile
      args: *proxy
    hostname: plantuml-local-server
    networks:
      - markdown-network
    environment: *proxy
  editor:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks, 
    # debugging) to execute as the user. Uncomment the next line if you want the entire 
    # container to run as this user instead. Note that, on Linux, you may need to 
    # ensure the UID and GID of the container user you create matches your local user. 
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    # user: vscode

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
    # folder. Note that the path of the Dockerfile and context is relative to the *primary* 
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    build:
      context: ./editor
      # dockerfile: ./Dockerfile
      args: *proxy
    volumes:
      - ..:/workspace:cached
      # - ./.vscode:/workspace/.vscode:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
    networks:
      - markdown-network
    environment: *proxy
networks:
  markdown-network:
